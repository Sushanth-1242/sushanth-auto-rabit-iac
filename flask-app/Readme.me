# Flask DevOps Application

A beautiful, containerized Flask application with a modern frontend that displays "Hello from DevOps!" with style.

## 🚀 Features

- Modern, responsive UI with animations
- Glassmorphism design
- Docker containerized
- Production-ready setup
- Health checks included
- Non-root user for security

## 📁 Project Structure

```
flask-devops-app/
│
├── app.py              # Main Flask application
├── requirements.txt    # Python dependencies
├── Dockerfile         # Docker configuration
└── README.md          # This file
```

## 🔧 Setup Instructions

### Method 1: Run with Docker (Recommended)

1. **Clone or create the project directory:**
   ```bash
   mkdir flask-devops-app
   cd flask-devops-app
   ```

2. **Create the files:**
   - Copy the `app.py` content to a file named `app.py`
   - Copy the `requirements.txt` content to a file named `requirements.txt`
   - Copy the `Dockerfile` content to a file named `Dockerfile`

3. **Build the Docker image:**
   ```bash
   docker build -t flask-devops-app .
   ```

4. **Run the container:**
   ```bash
   docker run -p 5000:5000 flask-devops-app
   ```

5. **Access the application:**
   Open your browser and navigate to: `http://localhost:5000`

### Method 2: Run Locally (without Docker)

1. **Install Python dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

2. **Run the Flask application:**
   ```bash
   python app.py
   ```

3. **Access the application:**
   Open your browser and navigate to: `http://localhost:5000`

## 🐳 Docker Commands

### Basic Operations
```bash
# Build the image
docker build -t flask-devops-app .

# Run the container
docker run -p 5000:5000 flask-devops-app

# Run in detached mode
docker run -d -p 5000:5000 --name my-flask-app flask-devops-app

# Stop the container
docker stop my-flask-app

# Remove the container
docker rm my-flask-app

# View logs
docker logs my-flask-app
```

### Development Mode
```bash
# Run with volume mounting for development
docker run -p 5000:5000 -v $(pwd):/app flask-devops-app
```

## 🔍 Health Check

The application includes a built-in health check that runs every 30 seconds. You can check the health status:

```bash
docker ps  # Shows health status in the STATUS column
```

## 🌐 Production Deployment

For production deployment, consider:

1. **Using a production WSGI server:**
   ```bash
   pip install gunicorn
   gunicorn -w 4 -b 0.0.0.0:5000 app:app
   ```

2. **Environment variables:**
   ```bash
   docker run -p 5000:5000 -e FLASK_ENV=production flask-devops-app
   ```

3. **Using docker-compose:**
   Create a `docker-compose.yml` file:
   ```yaml
   version: '3.8'
   services:
     web:
       build: .
       ports:
         - "5000:5000"
       restart: unless-stopped
   ```

## 🛠️ Customization

- Modify the HTML/CSS in `app.py` to change the appearance
- Add new routes by creating additional `@app.route()` decorators
- Update the `requirements.txt` file if you add new dependencies

## 📝 Notes

- The application runs on `0.0.0.0:5000` to work properly in containers
- A non-root user is created for better security
- Health checks are configured for container orchestration
- The app is set to debug mode for development (change for production)

## 🤝 Contributing

Feel free to fork this project and submit pull requests for improvements!

---

**Happy DevOps-ing! 🚀**
